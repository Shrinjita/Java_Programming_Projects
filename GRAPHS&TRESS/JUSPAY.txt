Enter no of test case: 2
Test case 1
Enter array length: 6
Enter array elements: 
Enter array element 1: 
5
Enter array element 2: 
-1
Enter array element 3: 
1
Enter array element 4: 
1
Enter array element 5: 
5
Enter array element 6: 
2
Test case 2
Enter array length: ...........

import java.util.*;
class Node{
    //initialization
    int val;
    //instantiation
    Node parent;
    //constructor
    public Node(int val){
        this.val=val;
        this.parent=null;
    }
}
class Main {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter no of test case: ");
        int testcases=sc.nextInt();
        for (int t=0;t<testcases;t++){
            System.out.println("Test case "+(t+1));
            System.out.print("Enter array length: ");
            int n=sc.nextInt();
            int a[]=new int[n];
            System.out.println("Enter array elements: ");
            for(int i=0;i<n;i++){
                System.out.println("Enter array element "+(i+1)+": ");
                a[i]=sc.nextInt();
            }
            Node nodes[]= new Node[n];
            for(int i=0;i<n;i++){
                nodes[i]=new Node(i);
            }
            for(int i=0;i<n;i++){
                if(a[i]==-1){
                    nodes[i].parent = null;
                    //bcoz its the root
                }
                else{
                    nodes[i].parent=nodes[a[i]];
                }
            }
            System.out.print("Enter x1: ");
            int x1 = sc.nextInt();
            System.out.print("Enter x2: ");
            int x2 = sc.nextInt();
            Node ancestor = findNearestCommonAncestor(nodes[x1],nodes[x2]);
            if (ancestor ==null){
                System.out.println("No Ancestor found");
            }
            else{
                System.out.println("Ancestor found: "+ ancestor.val);
            }
        }
    }//main
    
    private static Node findNearestCommonAncestor(Node n1,Node n2){
        //Set<DataType> setName = new HashSet<>();
        Set<Node> ancestors = new HashSet<>();
        while(n1!=null){
            ancestors.add(n1);
            n1=n1.parent;
        }
        while(n2!=null){
            if (ancestors.contains(n2)){
                return n2;
            }
            n2=n2.parent;
        }
        return null;
    }
}